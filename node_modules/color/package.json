{
  "name": "color",
  "description": "Color conversion and manipulation with CSS string support",
  "version": "0.6.0",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/color.git"
  },
  "main": "./color",
  "dependencies": {
    "color-convert": "0.2.x",
    "color-string": "0.1.x"
  },
  "devDependencies": {
    "nomnom": "~1.5.2",
    "browserify": "~2.18.1",
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.0"
  },
  "keywords": [
    "color",
    "colour",
    "css"
  ],
  "readme": "# color\n`color` is a JavaScript library for color conversion and manipulation with support for CSS color strings.\n\n```javascript\nvar color = Color(\"#7743CE\");\n\ncolor.alpha(0.5).lighten(0.5);\n\nconsole.log(color.hslString());  // \"hsla(262, 59%, 81%, 0.5)\"\n```\t\n\n## Install\n\n### browser\nDownload the latest [color.js](https://github.com/harthur/color/tree/gh-pages). The `Color` object is exported.\n\n### node\nFor [node](http://nodejs.org) with [npm](http://npmjs.org):\n\n```bash\nnpm install color\n```\n\nAnd use with `var Color = require(\"color\")`\n\n## API\n\n### Setters\n\n```javascript\nvar color = Color(\"rgb(255, 255, 255)\")\nvar color = Color({r: 255, g: 255, b: 255})\nvar color = Color().rgb(255, 255, 255)\nvar color = Color().rgb([255, 255, 255])\n```\nPass any valid CSS color string into `Color()` or a hash of values. Also load in color values with `rgb()`, `hsl()`, `hsv()`,and `cmyk()`.\n\n```javascript\ncolor.red(120)\n```\nSet the values for individual channels with `alpha`, `red`, `green`, `blue`, `hue`, `saturation` (hsl), `saturationv` (hsv), `lightness`, `cyan`, `magenta`, `yellow`, `black`\n\n### Getters\n\n\n```javascript\ncolor.rgb()       // {r: 255, g: 255, b: 255}\n```\nGet a hash of the rgb values with `rgb()`, similarly for `hsl()`, `hsv()`, and `cmyk()`\n\n```javascript\ncolor.rgbArray()  // [255, 255, 255]\n```\nGet an array of the values with `rgbArray()`, `hslArray()`, `hsvArray()`, and `cmykArray()`.\n\n```javascript\ncolor.red()       // 255\n```\nGet the value for an individual channel.\n\n### CSS Strings\n\n```javascript\ncolor.hslString()  // \"hsl(320, 50%, 100%)\"\n```\n\nDifferent CSS String formats for the color are on `hexString`, `rgbString`, `percentString`, `hslString`, and `keyword` (undefined if it's not a keyword color). `\"rgba\"` and `\"hsla\"` are used if the current alpha value of the color isn't `1`.\n\n### Luminosity\n\n```javascript\ncolor.luminosity();  // 0.412\n```\nThe [WCAG luminosity](http://www.w3.org/TR/WCAG20/#relativeluminancedef) of the color. 0 is black, 1 is white.\n\n```javascript\ncolor.contrast(Color(\"blue\"))  // 12\n```\nThe [WCAG contrast ratio](http://www.w3.org/TR/WCAG20/#contrast-ratiodef) to another color, from 1 (same color) to 21 (contrast b/w white and black).\n\n```javascript\ncolor.light();  // true\ncolor.dark();   // false\n```\nGet whether the color is \"light\" or \"dark\", useful for deciding text color.\n\n### Manipulation\n\n```javascript\ncolor.negate()         // rgb(0, 100, 255) -> rgb(255, 155, 0)\n\ncolor.lighten(0.5)     // hsl(100, 50%, 50%) -> hsl(100, 50%, 75%)\ncolor.darken(0.5)      // hsl(100, 50%, 50%) -> hsl(100, 50%, 25%)\n\ncolor.saturate(0.5)    // hsl(100, 50%, 50%) -> hsl(100, 75%, 50%)\ncolor.desaturate(0.5)  // hsl(100, 50%, 50%) -> hsl(100, 25%, 50%)\ncolor.greyscale()      // #5CBF54 -> #969696\n\ncolor.clearer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 0.4)\ncolor.opaquer(0.5)     // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 1.0)\n\ncolor.rotate(180)      // hsl(60, 20%, 20%) -> hsl(240, 20%, 20%)\ncolor.rotate(-90)      // hsl(60, 20%, 20%) -> hsl(330, 20%, 20%)\n\ncolor.mix(Color(\"yellow\"))   // cyan -> rgb(128, 255, 128)\n\n// chaining\ncolor.green(100).greyscale().lighten(0.6)\n```\n\n### Clone\n\nYou can can create a copy of an existing color object using `clone()`:\n\n```javascript\ncolor.clone() // -> New color object\n```\n\nAnd more to come...\n\n## Propers\n\nThe API was inspired by [color-js](https://github.com/brehaut/color-js). Manipulation functions by CSS tools like Sass, LESS, and Stylus.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/harthur/color/issues"
  },
  "homepage": "https://github.com/harthur/color",
  "_id": "color@0.6.0",
  "_shasum": "53f4b27698e1fe42a19423dc092dd8ee529b4267",
  "_from": "color@0.6.x",
  "_resolved": "https://registry.npmjs.org/color/-/color-0.6.0.tgz"
}
