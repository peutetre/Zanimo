diff --git a/README.md b/README.md
index 16b83e5..f049247 100644
--- a/README.md
+++ b/README.md
@@ -1,8 +1,12 @@
 # color-convert
-Color-convert is a library of plain color conversion functions. It converts between rgb, hsl, hsv, and cmyk:
+Color-convert is a color conversion library for JavaScript and node. It converts all ways between rgb, hsl, hsv, cmyk, and CSS keywords:
 
 ```javascript
-colorConvert.rgb2hsl([140, 200, 100]);   // [96, 48, 59]
+var converter = require("color-convert")();
+
+converter.rgb(140, 200, 100).hsl()   // [96, 48, 59]
+
+converter.keyword("blue").rgb()      // [0, 0, 255]
 ```	
 
 # Install
@@ -18,29 +22,28 @@ For [node](http://nodejs.org) with [npm](http://npmjs.org):
 Download the latest [color-convert.js](http://github.com/harthur/color-convert/downloads). All the methods are on the `colorConvert` object.
 
 # API
-Color-convert converts all ways between rgb, hsl, hsv, cmyk, and CSS keyword. Also from rgb to xyz and lab (these two assume sRGB color profile):
+Color-convert exports a converter object with getter/setter methods for each color space. It caches conversions:
 
 ```javascript
-var convert = require("color-convert");
-
-convert.rgb2hsl([255, 255, 255])        // rgb -> hsl, hsv, cmyk, keyword, xyz, and lab
-
-convert.hsl2rgb([360, 100, 100])        // hsl -> rgb, hsv, cmyk, and keyword
+var converter = require("color-convert")();
 
-convert.hsv2rgb([360, 100, 100])        // hsv -> rgb, hsl, cmyk, and keyword
+converter.rgb(140, 200, 100).hsl()   // [96, 48, 59]
 
-convert.cmyk2rgb([100, 100, 100, 100])  // cmyk -> rgb, hsl, hsv, and keyword
+converter.rgb([140, 200, 100])       // args can be an array
+```
 
-convert.keyword2rgb("blue")             // keyword -> rgb, hsl, hsv, and cmyk
+### Plain functions
+Get direct conversion functions with no fancy objects:
 
-convert.xyz2rgb([100, 100, 100])        // xyz -> rgb, lab
+```javascript
+require("convert").rgb2hsl([140, 200, 100]);   // [96, 48, 59]
 ```
 
 ### Unrounded
 To get the unrounded conversion, append `Raw` to the function name:
 
 ```javascript
-colorConvert.rgb2hslRaw([140, 200, 100]);   // [95.99999999999999, 47.619047619047606, 58.82352941176471]
+convert.rgb2hslRaw([140, 200, 100]);   // [95.99999999999999, 47.619047619047606, 58.82352941176471]
 ```
 
 ### Hash
@@ -50,5 +53,8 @@ There's also a hash of the conversion functions keyed first by the "from" color
 convert["hsl"]["hsv"]([160, 0, 20]) == convert.hsl2hsv([160, 0, 20])
 ```
 
+### Other spaces
+There are some conversions from rgb (sRGB) to XYZ and LAB too, available as `rgb2xyz()`, `rgb2lab()`, `xyz2rgb()`, and `xyz2lab()`.
+
 # Contribute
 Please fork, add conversions, figure out color profile stuff for XYZ, LAB, etc. This is meant to be a basic library that can be used by other libraries to wrap color calculations in some cool way.
diff --git a/index.js b/index.js
index 3804a0e..84ace5c 100644
--- a/index.js
+++ b/index.js
@@ -1,11 +1,30 @@
 var conversions = require("./conversions");
 
-var exports = {};
-module.exports = exports;
+
+var convert = {};
+/*
+module.exports = convert;
+*/
+
+/******
+module.exports = ArgParser;
+// for nomnom.parseArgs()
+var argParser = ArgParser();
+
+for (var i in argParser) {
+  if (typeof argParser[i] == "function") {
+     ArgParser[i] = argParser[i];     
+  }
+}
+********/
+
+var convert = function() {
+  return new Converter();
+}
 
 for (var func in conversions) {
-  // export rgb2hslRaw
-  exports[func + "Raw"] =  (function(func) {
+  // export Raw versions
+  convert[func + "Raw"] =  (function(func) {
     // accept array or plain args
     return function(arg) {
       if (typeof arg == "number")
@@ -19,9 +38,9 @@ for (var func in conversions) {
       to = pair[2];
 
   // export rgb2hsl and ["rgb"]["hsl"]
-  exports[from] = exports[from] || {};
+  convert[from] = convert[from] || {};
 
-  exports[from][to] = exports[func] = (function(func) { 
+  convert[from][to] = convert[func] = (function(func) { 
     return function(arg) {
       if (typeof arg == "number")
         arg = Array.prototype.slice.call(arguments);
@@ -35,4 +54,57 @@ for (var func in conversions) {
       return val;
     }
   })(func);
-}
\ No newline at end of file
+}
+
+
+/* Converter does lazy conversion and caching */
+var Converter = function() {
+  this.convs = {};
+};
+
+/* Either get the values for a space or
+  set the values for a space, depending on args */
+Converter.prototype.routeSpace = function(space, args) {
+  var values = args[0];
+  if (values === undefined) {
+     // color.rgb()
+     return this.getValues(space);
+  }
+  // color.rgb(10, 10, 10)
+  if (typeof values == "number") {
+     values = Array.prototype.slice.call(args);        
+  }
+
+  return this.setValues(space, values);
+};
+  
+/* Set the values for a space, invalidating cache */
+Converter.prototype.setValues = function(space, values) {
+  this.space = space;
+  this.convs = {};
+  this.convs[space] = values;
+  return this;
+};
+
+/* Get the values for a space. If there's already
+  a conversion for the space, fetch it, otherwise
+  compute it */
+Converter.prototype.getValues = function(space) {
+  var vals = this.convs[space];
+  if (!vals) {
+    var fspace = this.space;
+        from = this.convs[fspace];
+    vals = convert[fspace][space](from);
+
+    this.convs[space] = vals;
+  }
+  return vals;
+};
+
+["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
+  Converter.prototype[space] = function(vals) {
+    return this.routeSpace(space, arguments);
+  }
+});
+
+module.exports = convert;
\ No newline at end of file
diff --git a/package.json b/package.json
index 9bca927..0874190 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "color-convert",
     "description": "Plain color conversion functions",
-    "version": "0.2.1",
+    "version": "0.3.0",
     "author": "Heather Arthur <fayearthur@gmail.com>",
     "repository": {
         "type": "git",
diff --git a/test/basic.js b/test/basic.js
index 720163f..2446f01 100644
--- a/test/basic.js
+++ b/test/basic.js
@@ -106,3 +106,23 @@ assert.deepEqual(convert["xyz"]["lab"](val), convert.xyz2lab(val));
 
 val = [69, -48, 44];
 assert.deepEqual(convert["lab"]["xyz"](val), [25, 39, 15]);
+
+
+// converter
+var converter = convert();
+
+var vals = [140, 200, 100];
+converter.rgb(140, 200, 100);
+
+assert.deepEqual(converter.hsl(), convert.rgb2hsl(vals));
+assert.deepEqual(converter.hsv(), convert.rgb2hsv(vals));
+assert.deepEqual(converter.cmyk(), convert.rgb2cmyk(vals));
+assert.deepEqual(converter.rgb(), vals);
+assert.deepEqual(converter.rgb([255, 228, 196]).keyword(), "bisque");
+
+vals = [96, 48, 59];
+converter.hsl(vals);
+assert.deepEqual(converter.rgb(), convert.hsl2rgb(vals));
+assert.deepEqual(converter.hsv(), convert.hsl2hsv(vals));
+assert.deepEqual(converter.cmyk(), convert.hsl2cmyk(vals));
+assert.deepEqual(converter.keyword(), convert.hsl2keyword(vals));
diff --git a/test/speed.js b/test/speed.js
new file mode 100644
index 0000000..2462e11
--- /dev/null
+++ b/test/speed.js
@@ -0,0 +1,23 @@
+var convert = require("../index");
+
+var converter = convert();
+
+var times = 10000;
+
+console.time("cached");
+converter.rgb(10, 2, 30);
+for(var i = 0; i < times; i++) {
+  converter.hsv();
+  converter.hsl();
+  converter.cmyk();
+}
+console.timeEnd("cached");
+
+console.time("uncached");
+for(var i = 0; i < times; i++) {
+  convert.rgb2hsl(10, 2, 30);
+  convert.rgb2hsv(10, 2, 30);
+  convert.rgb2cmyk(10, 2, 30);
+}
+console.timeEnd("uncached");
+
